var searchIndex = {};
searchIndex["ini"] = {"doc":"Ini parser for Rust","items":[[0,"ini","ini","Ini",null,null],[3,"SectionSetter","ini::ini","A setter which could be used to set key-value pair in a specified section",null,null],[3,"Ini","","Ini struct",null,null],[3,"SectionIterator","","Iterator for sections",null,null],[3,"SectionMutIterator","","Iterator for mutable sections",null,null],[3,"SectionIntoIter","","",null,null],[3,"Error","","Parse error",null,null],[12,"line","","",0,null],[12,"col","","",0,null],[12,"msg","","",0,null],[4,"EscapePolicy","","",null,null],[13,"Nothing","","escape absolutely nothing (dangerous)",1,null],[13,"Basics","","only escape the most necessary things",1,null],[13,"BasicsUnicode","","escape basics and non-ascii characters",1,null],[13,"Reserved","","Escape reserved symbols.",1,null],[13,"ReservedUnicode","","Escape reserved symbols and non-ascii characters",1,null],[13,"Everything","","Escape everything that some INI implementations assume",1,null],[6,"Properties","","Properties type (key-value pairs)",null,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"should_escape","","Given a character this returns true if it should be escaped as\nper this policy or false if not.",1,null],[11,"set","","Set key-value pair in this section",2,null],[11,"delete","","Delete the entry in this section with `key`",2,null],[11,"get","","Get the entry in this section with `key`",2,null],[11,"clone","","",3,null],[11,"new","","Create an instance",3,{"inputs":[],"output":{"name":"ini"}}],[11,"with_section","","Set with a specified section, `None` is for the general section",3,null],[11,"general_section","","Get the immmutable general section",3,null],[11,"general_section_mut","","Get the mutable general section",3,null],[11,"section","","Get a immutable section",3,null],[11,"section_mut","","Get a mutable section",3,null],[11,"entry","","Get the entry",3,null],[11,"clear","","Clear all entries",3,null],[11,"sections","","Iterate with sections",3,null],[11,"set_to","","Set key-value to a section",3,null],[11,"get_from","","Get the value from a section with key",3,null],[11,"get_from_or","","Get the value from a section with key, return the default value if it does not exist",3,null],[11,"get_from_mut","","Get the mutable from a section with key",3,null],[11,"delete","","Delete a section, return the properties if it exists",3,null],[11,"delete_from","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"write_to_file","","Write to a file",3,null],[11,"write_to_file_policy","","Write to a file",3,null],[11,"write_to","","Write to a writer",3,null],[11,"write_to_policy","","Write to a writer",3,null],[11,"load_from_str","","Load from a string",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"read_from","","Load from a reader",3,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"load_from_file","","Load from a file",3,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"iter","","Immutable iterate though sections",3,null],[11,"mut_iter","","Mutable iterate though sections\n*Deprecated! Use `iter_mut` instead!*",3,null],[11,"iter_mut","","Mutable iterate though sections",3,null],[11,"next","","",4,null],[11,"next","","",5,null],[11,"next","","",6,null],[11,"into_iter","","",3,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null]],"paths":[[3,"Error"],[4,"EscapePolicy"],[3,"SectionSetter"],[3,"Ini"],[3,"SectionIterator"],[3,"SectionMutIterator"],[3,"SectionIntoIter"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["pls"] = {"doc":"","items":[[3,"PlaylistElement","pls","",null,null],[4,"ElementLength","","",null,null],[13,"Seconds","","",0,null],[13,"Unknown","","",0,null],[4,"ParseError","","",null,null],[13,"InvalidVersion","","",1,null],[13,"MissingPlaylistSection","","",1,null],[13,"MissingKey","","",1,null],[13,"InvalidInteger","","",1,null],[13,"Ini","","",1,null],[5,"parse","","",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"write","","",null,{"inputs":[{"name":"i"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"parseerror"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseerror"}}],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null]],"paths":[[4,"ElementLength"],[4,"ParseError"],[3,"PlaylistElement"]]};
initSearch(searchIndex);
